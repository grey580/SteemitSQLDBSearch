//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SteemitSQLDBSearch.model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBSteemEntities : DbContext
    {
        public DBSteemEntities()
            : base("name=DBSteemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Block> Blocks { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TxAccountCreate> TxAccountCreates { get; set; }
        public virtual DbSet<TxAccountRecover> TxAccountRecovers { get; set; }
        public virtual DbSet<TxAccountUpdate> TxAccountUpdates { get; set; }
        public virtual DbSet<TxAccountWitnessProxy> TxAccountWitnessProxies { get; set; }
        public virtual DbSet<TxAccountWitnessVote> TxAccountWitnessVotes { get; set; }
        public virtual DbSet<TxClaimRewardBalance> TxClaimRewardBalances { get; set; }
        public virtual DbSet<TxComment> TxComments { get; set; }
        public virtual DbSet<TxCommentsOption> TxCommentsOptions { get; set; }
        public virtual DbSet<TxConvert> TxConverts { get; set; }
        public virtual DbSet<TxCustom> TxCustoms { get; set; }
        public virtual DbSet<TxDelegateVestingShare> TxDelegateVestingShares { get; set; }
        public virtual DbSet<TxDeleteComment> TxDeleteComments { get; set; }
        public virtual DbSet<TxEscrowApprove> TxEscrowApproves { get; set; }
        public virtual DbSet<TxEscrowDispute> TxEscrowDisputes { get; set; }
        public virtual DbSet<TxEscrowReleas> TxEscrowReleases { get; set; }
        public virtual DbSet<TxEscrowTransfer> TxEscrowTransfers { get; set; }
        public virtual DbSet<TxFeed> TxFeeds { get; set; }
        public virtual DbSet<TxLimitOrder> TxLimitOrders { get; set; }
        public virtual DbSet<TxPow> TxPows { get; set; }
        public virtual DbSet<TxTransfer> TxTransfers { get; set; }
        public virtual DbSet<TxVote> TxVotes { get; set; }
        public virtual DbSet<TxWithdraw> TxWithdraws { get; set; }
        public virtual DbSet<TxWithdrawVestingRoute> TxWithdrawVestingRoutes { get; set; }
        public virtual DbSet<TxWitnessUpdate> TxWitnessUpdates { get; set; }
        public virtual DbSet<VOAuthorReward> VOAuthorRewards { get; set; }
        public virtual DbSet<VOCurationReward> VOCurationRewards { get; set; }
        public virtual DbSet<VOFillConvertRequest> VOFillConvertRequests { get; set; }
        public virtual DbSet<VOFillOrder> VOFillOrders { get; set; }
        public virtual DbSet<VOFillVestingWithdraw> VOFillVestingWithdraws { get; set; }
        public virtual DbSet<VOInterest> VOInterests { get; set; }
        public virtual DbSet<VOShutdownWitness> VOShutdownWitnesses { get; set; }
        public virtual DbSet<TxCommentsPost> TxCommentsPosts { get; set; }
        public virtual DbSet<TxCustomsFollow> TxCustomsFollows { get; set; }
        public virtual DbSet<TxCustomsReblog> TxCustomsReblogs { get; set; }
    
        public virtual ObjectResult<string> sp_GetAccounts(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetAccounts", nameParameter);
        }
    
        public virtual ObjectResult<sp_GetStats_Result> sp_GetStats(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStats_Result>("sp_GetStats", nameParameter);
        }
    }
}
